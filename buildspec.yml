version: 0.2

phases:
  install: 
    runtime-versions:
      php: 8.0
      nodejs: 12.x
  pre_build:
    commands:
    - echo Logging in to Amazon ECR....
    - aws --version
    # log in to Elastic container registry
    - aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 618876817619.dkr.ecr.us-west-1.amazonaws.com
    - REPOSITORY_URI=618876817619.dkr.ecr.us-west-1.amazonaws.com/wfg
    - IMAGE_TAG=1.0
    - echo Installing front-end dependencies...
    - npm install
  build:
    commands: 
    # Back-end build step.
    - echo Building front-end assets...
    - npm run prod
    - echo Installing composer...
    - composer install
    - echo Creating .env file...
    - cp .env.production .env
    # TODO: Here, add Systems Manager Parameter Store database values, add them to the environment, migrate & seed the database, and then delete the .env & replace it with a new fresh one before running key:generate. This feels convoluted, but it means we can re-add the DB env params in the deployment to EC2 stage, and we never store them in ECR, which is where they'd end up if we added them here and then pushed the resulting image up to ECR. Not a huge security problem for a site this small, given you'd need ECR access to see anything, but poor practice to leave secrets sitting statically in a file. 
    - echo Generating app key...
    - php artisan key:generate
    - php artisan route:clear
    - php artisan config:clear
    - php artisan cache:clear
    # - Running migrations & seeders...
    # - php artisan migrate --seed

    # Build & push the Docker image. 
    - echo Building the Docker image...
    - docker build -t $REPOSITORY_URI:latest .
    - echo Pushing the Docker image to $REPOSITORY_URI...
    - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`.
      - echo Pushing the Docker image...
      - docker image ls -a
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      # Fairly certain we don't need this  stage anymore. 
      - echo Writing image definitions file...
      - printf '[{"name":"'$ecs_container_name'","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
    files: imagedefinitions.json